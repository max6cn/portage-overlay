--- HIPIFY-rocm-5.6.1.orig/CMakeLists.txt	2023-05-12 18:19:43.000000000 -0700
+++ HIPIFY-rocm-5.6.1/CMakeLists.txt	2023-11-04 18:17:15.447499568 -0700
@@ -28,48 +28,48 @@
 
 file(GLOB_RECURSE HIPIFY_SOURCES src/*.cpp)
 file(GLOB_RECURSE HIPIFY_HEADERS src/*.h)
-add_llvm_executable(hipify-clang ${HIPIFY_SOURCES} ${HIPIFY_HEADERS})
-target_link_directories(hipify-clang PRIVATE ${LLVM_LIBRARY_DIRS})
+#add_llvm_executable(hipify-clang ${HIPIFY_SOURCES} ${HIPIFY_HEADERS})
+#target_link_directories(hipify-clang PRIVATE ${LLVM_LIBRARY_DIRS})
 
 set(CMAKE_CXX_COMPILER ${LLVM_TOOLS_BINARY_DIR}/clang++)
 set(CMAKE_C_COMPILER ${LLVM_TOOLS_BINARY_DIR}/clang)
 
 # Link against LLVM and CLANG libraries
-target_link_libraries(hipify-clang PRIVATE
-    clangASTMatchers
-    clangFrontend
-    clangTooling
-    clangParse
-    clangSerialization
-    clangSema
-    clangEdit
-    clangFormat
-    clangLex
-    clangAnalysis
-    clangDriver
-    clangAST
-    clangToolingCore
-    clangRewrite
-    clangBasic
-    LLVMProfileData
-    LLVMSupport
-    LLVMMCParser
-    LLVMMC
-    LLVMBitReader
-    LLVMOption
-    LLVMCore)
-
-if(LLVM_PACKAGE_VERSION VERSION_GREATER "6.0.1")
-    target_link_libraries(hipify-clang PRIVATE clangToolingInclusions)
-endif()
-
-if(LLVM_PACKAGE_VERSION VERSION_GREATER "9.0.1")
-    target_link_libraries(hipify-clang PRIVATE LLVMFrontendOpenMP)
-endif()
-
-if(LLVM_PACKAGE_VERSION VERSION_EQUAL "15.0.0" OR LLVM_PACKAGE_VERSION VERSION_GREATER "15.0.0")
-    target_link_libraries(hipify-clang PRIVATE LLVMWindowsDriver clangSupport)
-endif()
+#target_link_libraries(hipify-clang PRIVATE
+#    clangASTMatchers
+#    clangFrontend
+#    clangTooling
+#    clangParse
+#    clangSerialization
+#    clangSema
+#    clangEdit
+#    clangFormat
+#    clangLex
+#    clangAnalysis
+#    clangDriver
+#    clangAST
+#    clangToolingCore
+#    clangRewrite
+#    clangBasic
+#    LLVMProfileData
+#    LLVMSupport
+#    LLVMMCParser
+#    LLVMMC
+#    LLVMBitReader
+#    LLVMOption
+#    LLVMCore)
+#
+#if(LLVM_PACKAGE_VERSION VERSION_GREATER "6.0.1")
+#    target_link_libraries(hipify-clang PRIVATE clangToolingInclusions)
+#endif()
+#
+#if(LLVM_PACKAGE_VERSION VERSION_GREATER "9.0.1")
+#    target_link_libraries(hipify-clang PRIVATE LLVMFrontendOpenMP)
+#endif()
+#
+#if(LLVM_PACKAGE_VERSION VERSION_EQUAL "15.0.0" OR LLVM_PACKAGE_VERSION VERSION_GREATER "15.0.0")
+#    target_link_libraries(hipify-clang PRIVATE LLVMWindowsDriver clangSupport)
+#endif()
 
 if(LLVM_PACKAGE_VERSION VERSION_EQUAL "16.0.0" OR LLVM_PACKAGE_VERSION VERSION_GREATER "16.0.0")
     if(MSVC)
@@ -91,13 +91,13 @@
     add_definitions(-DSWDEV_375013)
 endif()
 
-if(MSVC)
-    target_link_libraries(hipify-clang PRIVATE version)
-    target_compile_options(hipify-clang PRIVATE ${STD} /Od /GR- /EHs- /EHc-)
-    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} /SUBSYSTEM:WINDOWS")
-else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${STD} -pthread -fno-rtti -fvisibility-inlines-hidden")
-endif()
+#if(MSVC)
+#    target_link_libraries(hipify-clang PRIVATE version)
+#    target_compile_options(hipify-clang PRIVATE ${STD} /Od /GR- /EHs- /EHc-)
+#    set(CMAKE_CXX_LINK_FLAGS "${CMAKE_CXX_LINK_FLAGS} /SUBSYSTEM:WINDOWS")
+#else()
+#    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${STD} -pthread -fno-rtti -fvisibility-inlines-hidden")
+#endif()
 
 # Address Sanitize Flag
 if(ADDRESS_SANITIZER)
@@ -126,7 +126,7 @@
 
 set(HIPIFY_BIN_INSTALL_PATH "${CMAKE_INSTALL_PREFIX}/bin")
 
-install(TARGETS hipify-clang DESTINATION bin)
+#install(TARGETS hipify-clang DESTINATION bin)
 # install bin directory in CMAKE_INSTALL_PREFIX path
 install(
     DIRECTORY ${CMAKE_SOURCE_DIR}/bin
@@ -135,28 +135,28 @@
     PATTERN "hipify-perl"
     PATTERN "*.sh")
 # install all folders under clang/version/ in CMAKE_INSTALL_PREFIX path
-install(
-    DIRECTORY ${LLVM_DIR}/../../clang/${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}/
-    DESTINATION .
-    COMPONENT clang-resource-headers
-    FILES_MATCHING
-    PATTERN "*.h"
-    PATTERN "*.modulemap"
-    PATTERN "algorithm"
-    PATTERN "complex"
-    PATTERN "new"
-    PATTERN "ppc_wrappers" EXCLUDE
-    PATTERN "openmp_wrappers" EXCLUDE)
+#install(
+#    DIRECTORY ${LLVM_DIR}/../../clang/${LLVM_VERSION_MAJOR}.${LLVM_VERSION_MINOR}.${LLVM_VERSION_PATCH}/
+#    DESTINATION .
+#    COMPONENT clang-resource-headers
+#    FILES_MATCHING
+#    PATTERN "*.h"
+#    PATTERN "*.modulemap"
+#    PATTERN "algorithm"
+#    PATTERN "complex"
+#    PATTERN "new"
+#    PATTERN "ppc_wrappers" EXCLUDE
+#    PATTERN "openmp_wrappers" EXCLUDE)
 
 option(FILE_REORG_BACKWARD_COMPATIBILITY "Enable File Reorg with backward compatibility" ON)
 
 if(UNIX)
 
-    #get rid of any RPATH definations already
-    set_target_properties(hipify-clang PROPERTIES INSTALL_RPATH "")
-    #set RPATH for the binary
-    set_target_properties(hipify-clang PROPERTIES LINK_FLAGS "-Wl,--disable-new-dtags -Wl,--rpath,$ORIGIN/../lib" )
-
+#    #get rid of any RPATH definations already
+#    set_target_properties(hipify-clang PROPERTIES INSTALL_RPATH "")
+#    #set RPATH for the binary
+#    set_target_properties(hipify-clang PROPERTIES LINK_FLAGS "-Wl,--disable-new-dtags -Wl,--rpath,$ORIGIN/../lib" )
+#
     if(FILE_REORG_BACKWARD_COMPATIBILITY)
         include(hipify-backward-compat.cmake)
     endif()
@@ -165,14 +165,14 @@
     configure_file(packaging/hipify-clang.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
     configure_file(${CMAKE_SOURCE_DIR}/LICENSE.txt ${BUILD_DIR}/LICENSE.txt @ONLY)
 
-    add_custom_target(package_hipify-clang  COMMAND ${CMAKE_COMMAND} .
-        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
-        COMMAND rm -rf *.deb *.rpm *.tar.gz
-        COMMAND make package
-        COMMAND cp *.deb ${PROJECT_BINARY_DIR}
-        COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
-        COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
-        WORKING_DIRECTORY ${BUILD_DIR})
+#    add_custom_target(package_hipify-clang  COMMAND ${CMAKE_COMMAND} .
+#        WORKING_DIRECTORY ${PROJECT_BINARY_DIR}
+#        COMMAND rm -rf *.deb *.rpm *.tar.gz
+#        COMMAND make package
+#        COMMAND cp *.deb ${PROJECT_BINARY_DIR}
+#        COMMAND cp *.rpm ${PROJECT_BINARY_DIR}
+#        COMMAND cp *.tar.gz ${PROJECT_BINARY_DIR}
+#        WORKING_DIRECTORY ${BUILD_DIR})
 endif()
